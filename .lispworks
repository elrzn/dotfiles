(in-package "CL-USER")

#-:LISPWORKS-PERSONAL-EDITION
(load-all-patches)

#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(editor:defcommand "Save File and Compile Defun" (p)
     "Save current file and compile current function"
     "Save current file and compile current function"
  (editor:save-file-command p)
  (editor:compile-defun-command p))

(setf (editor:variable-value `editor:backups-wanted) nil)

(editor:bind-key "Compile And Load Buffer File" #("Control-c" "Control-k") :mode "Lisp")
(editor:bind-key "Save File and Compile Defun" #("Control-c" "Control-c") :mode "Lisp")
(editor:bind-key "Disassemble Definition" #("Control-c" "Control-d") :mode "Lisp")
(editor:bind-key "Macroexpand Form" #("Control-c" "Control-m") :mode "Lisp")

(editor:bind-key "Split Window Horizontally" #("Control-x" "3"))
(editor:bind-key "Split Window Vertically" #("Control-x" "2"))

(editor:bind-key "Indent New Line" #\Return :mode "Lisp")

(editor:set-interrupt-keys '("Escape" "Control-g"))

(defvar *arglist-delay* 1)
(defvar *arglist-timer* nil)

(defvar *setf-names-p* nil "when true, show the argument list for setf names too.")

(editor:defcommand  "Insert Space and Show Arglist" (p)
     "Display the argument list in the echo area a while after inserting Space to the right of the function."
     "Display the argument list."
  (editor:self-insert-command p #\Space)
  (let* ((x (if *setf-names-p*
                (editor:with-current-point-locked 
                    (cp :for-modification nil :errorp nil)
                  (editor:with-point ((temp1 cp)
                                      (temp2 cp))
                    (when (editor:form-offset temp1 -1)
                      (ignore-errors
                        (let ((*package* (editor::buffer-package-to-use temp1)))
                          (read-from-string 
                           (editor:points-to-string temp1 temp2)))))))
              (editor:buffer-symbol-at-point (editor:current-buffer))))
         (window (editor:current-window))
         (function (find-function-for-arglist x)))
    (when (fboundp function)
      (show-arglist function 
                    (capi:top-level-interface 
                     (editor:window-text-pane window)) 
                    window))))

(defun show-arglist (function interface editor-window)
  (setq *arglist-timer* 
        (mp:make-timer 'capi:execute-with-interface interface 
                       'editor:process-character 
                       (list 'editor:function-arglist-command nil function)
                       editor-window))
  (mp:schedule-timer-relative *arglist-timer* *arglist-delay*))

(defun find-function-for-arglist (x)
  (typecase x
    (symbol x)
    (list (unless (dotted-list-p x)
            (if (eq (length x) 1)
                (find-function-for-arglist (car x))
              (case (car x)
                ((quote function) (find-function-for-arglist (cdr x)))
                (setf (and (= (length x) 2)
                           (symbolp (second x))
                           x)))))))) 

(editor:bind-key "Insert Space and Show Arglist" #\Space :mode "Lisp") 
(editor:bind-key "Insert Space and Show Arglist" #\Space :mode "Execute") 
